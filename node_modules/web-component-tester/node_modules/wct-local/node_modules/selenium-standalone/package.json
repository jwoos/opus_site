{
  "name": "selenium-standalone",
  "version": "3.3.0",
  "description": "installs a `selenium-standalone` command line to install and start a standalone selenium server",
  "main": "index.js",
  "scripts": {
    "test": "./bin/selenium-standalone install && mocha"
  },
  "bin": {
    "selenium-standalone": "./bin/selenium-standalone",
    "start-selenium": "./bin/start-selenium"
  },
  "repository": {
    "type": "git",
    "url": "git@github.com:vvo/selenium-standalone.git"
  },
  "bugs": {
    "url": "https://github.com/vvo/selenium-standalone/issues"
  },
  "homepage": "https://github.com/vvo/selenium-standalone",
  "author": {
    "name": "Vincent Voyer",
    "email": "vincent@zeroload.net"
  },
  "license": "MIT",
  "dependencies": {
    "async": "^0.9.0",
    "commander": "^2.6.0",
    "lodash": "^2.4.1",
    "minimist": "^1.1.0",
    "mkdirp": "^0.5.0",
    "progress": "^1.1.8",
    "request": "^2.51.0",
    "unzip": "^0.1.11",
    "whereis": "^0.4.0"
  },
  "devDependencies": {
    "mocha": "^2.1.0"
  },
  "contributors": [
    {
      "name": "Vincent Voyer",
      "email": "vincent@zeroload.net"
    },
    {
      "name": "Josh Chisholm",
      "email": "joshuachisholm@gmail.com"
    }
  ],
  "readme": "# selenium-standalone [![Build Status](http://img.shields.io/travis/vvo/selenium-standalone/master.svg?style=flat-square)](https://travis-ci.org/vvo/selenium-standalone) [![Dependency Status](http://img.shields.io/david/vvo/selenium-standalone.svg?style=flat-square)](https://david-dm.org/vvo/selenium-standalone) [![devDependency Status](http://img.shields.io/david/dev/vvo/selenium-standalone.svg?style=flat-square)](https://david-dm.org/vvo/selenium-standalone#info=devDependencies)\n\n[![Gitter](https://badges.gitter.im/Join%20Chat.svg)](https://gitter.im/vvo/selenium-standalone?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)\n\nCommand line or programmatic install and launch of [selenium](http://www.seleniumhq.org/download/) standalone\nserver, [chrome driver](https://code.google.com/p/selenium/wiki/ChromeDriver), [internet explorer driver](https://code.google.com/p/selenium/wiki/InternetExplorerDriver), [firefox driver](https://code.google.com/p/selenium/wiki/FirefoxDriver) and phantomjs\n\nIt will install a `selenium-standalone` command line that will be able to `install` selenium server and `start` firefox, chrome, internet explorer or phantomjs for your tests.\n\n```shell\nnpm install selenium-standalone@latest -g\nselenium-standalone install\nselenium-standalone start\n```\n\n![screencast](screencast.gif)\n\n## Command line API\n\n```shell\n# simple, use defaults and latest selenium\nselenium-standalone install\nselenium-standalone start\n\n# specify selenium args, everything after -- is for selenium\nselenium-standalone start -- -debug\n\n# choose selenium version\nselenium-standalone install --version=2.44.0 --baseURL=http://selenium-release.storage.googleapis.com\n\n# choose chrome driver version\nselenium-standalone install --drivers.chrome.version=2.13 --drivers.chrome.baseURL=http://chromedriver.storage.googleapis.com\n\n# choose ie driver architecture\nselenium-standalone start --drivers.ie.arch=ia32 --drivers.ie.baseURL=http://selenium-release.storage.googleapis.com\n```\n\n## Programmatic API\n\n### Example\n\n```js\nvar selenium = require('selenium-standalone');\n\nselenium.install({\n  // check for more recent versions of selenium here:\n  // http://selenium-release.storage.googleapis.com/index.html\n  version: '2.44.0',\n  baseURL: 'http://selenium-release.storage.googleapis.com',\n  drivers: {\n    chrome: {\n      // check for more recent versions of chrome driver here:\n      // http://chromedriver.storage.googleapis.com/index.html\n      version: '2.13',\n      arch: process.arch,\n      baseURL: 'http://chromedriver.storage.googleapis.com'\n    },\n    ie: {\n      // check for more recent versions of internet explorer driver here:\n      // http://selenium-release.storage.googleapis.com/index.html\n      version: '2.44',\n      arch: process.arch,\n      baseURL: 'http://selenium-release.storage.googleapis.com'\n    }\n  },\n  logger: function(message) {\n\n  },\n  progressCb: function(totalLength, progressLength, chunkLength) {\n\n  }\n}, cb);\n```\n\n### selenium.install([opts,] cb)\n\n`opts.version` [selenium version](http://selenium-release.storage.googleapis.com/index.html) to install.\n\n`opts.drivers` map of drivers to download and install along with selenium standalone server.\n\nHere are the current defaults:\n\n```js\n{\n  chrome: {\n    version: '2.13',\n    arch: process.arch,\n    baseURL: 'http://chromedriver.storage.googleapis.com'\n  },\n  ie: {\n    version: '2.44.0',\n    arch: process.arch,\n    baseURL: 'http://selenium-release.storage.googleapis.com'\n  }\n}\n```\n\n`arch` is either `ia32` or `x64`, it's here because you might want to switch to a particular\narch [sometimes](https://code.google.com/p/selenium/issues/detail?id=5116#c9).\n\n`baseURL` is used to find the server having the selenium or drivers files.\n\n`opts.progressCb(totalLength, progressLength, chunkLength)` will be called if provided with raw bytes length numbers about the current download process. It is used by the command line to show a progress bar.\n\n`opts.logger` will be called if provided with some debugging information about the installation process.\n\n`cb(err)` called when install finished or errored.\n\n### selenium.start([opts,] cb)\n\n`opts.drivers` map of drivers to run along with selenium standalone server, same\nas `selenium.install`.\n\nBy default all drivers are loaded, you only control and change the versions or archs.\n\n`opts.spawnOptions` [spawn options](http://nodejs.org/api/child_process.html#child_process_child_process_spawn_command_args_options) for the selenium server. Defaults to `undefined`\n\n`opts.seleniumArgs` array of arguments for the selenium server, passed directly to [child_process.spawn](http://nodejs.org/api/child_process.html#child_process_child_process_spawn_command_args_options). Defaults to `[]`.\n\n`opts.spawnCb` will be called if provided as soon as the selenium child process was spawned. It may be interesting if you want to do some more debug.\n\n`cb(err, child)` called when the server is running and listening, child is the [ChildProcess](http://nodejs.org/api/child_process.html#child_process_class_childprocess) instance created.\n\nSo you can `child.kill()` when you are done.\n\n## Available browsers\n\nBy default, google chrome, firefox and phantomjs are available\nwhen installed on the sytem.\n\n## Tips\n\n### Running headlessly\n\nOn linux,\n\nTo run headlessly, you can use [xvfb](http://en.wikipedia.org/wiki/Xvfb):\n\n```shell\nxvfb-run --server-args=\"-screen 0, 1366x768x24\" selenium-standalone start\n```\n",
  "readmeFilename": "README.md",
  "_id": "selenium-standalone@3.3.0",
  "_from": "selenium-standalone@>=3.2.0 <4.0.0"
}
